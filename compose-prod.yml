version: '3.8'

services:
  app-service:
    build:
      context: ./services/application
      dockerfile: Dockerfile
      target: production
    container_name: challenges2_app-service
    env_file:
      - .env
    volumes:
      - ./services/application:/app
      - /app/node_modules

  auth-service:
    build:
      context: ./services/authentication
      dockerfile: Dockerfile
      target: production
    container_name: challenges2_auth-service
    env_file:
      - .env
    volumes:
      - ./services/authentication:/auth-service
      - /auth-service/node_modules

  quiz-service:
    build:
      context: ./services/quiz
      dockerfile: Dockerfile
      target: production
    container_name: challenges2_quiz-service
    env_file:
      - .env
    volumes:
      - ./services/quiz:/quiz-service
      - /quiz-service/node_modules

  mailing-service:
    build:
      context: ./services/mailing
      dockerfile: Dockerfile
      target: production
    container_name: challenges2_mailing-service
    env_file:
      - .env
    volumes:
      - ./services/mailing:/mailing-service
      - /mailing-service/node_modules
    ports:
      - "3023:3023"

  node:
    container_name: challenges2_frontend
    build:
      context: ./app
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "5173:5173"
    volumes:
      - ./app:/app
      - /app/node_modules

  api:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
      target: production
    container_name: challenges2_api-gateway
    env_file:
      - .env
    volumes:
      - ./api-gateway:/app
      - /app/node_modules
    ports:
      - '3080:3080'

  postgresdb:
    image: postgres:15.2-alpine
    container_name: challengeS2_postgres
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DATABASE_POSTGRES_DB}
      POSTGRES_USER: ${DATABASE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${DATABASE_POSTGRES_PASSWORD}
    volumes:
      - /var/lib/postgresql/data
    ports:
      - "5432:5432"

  adminer:
    image: adminer
    container_name: challenges2_adminer
    restart: unless-stopped
    ports:
      - "8081:8080"

  mongodb:
    image: mongo
    container_name: challenges2_mongodb
    restart: unless-stopped
    env_file:
      - .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DATABASE_MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${DATABASE_MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${DATABASE_MONGO_NAME}
    volumes:
      - /data/db
    ports:
      - "27017:27017"
